import 'package:dio/dio.dart';
import '../models/chords_models.dart';
import 'api_client.dart';

class ChordsService {
  final ApiClient _apiClient;

  ChordsService(this._apiClient);

  Future<ChordsResponse> suggestChords(ChordsRequest request) async {
    try {
      final response = await _apiClient.dio.post(
        '/chords/suggest',
        data: request.toJson(),
      );

      return ChordsResponse.fromJson(response.data);
    } on DioException {
      // Mock response for demo
      await Future.delayed(const Duration(seconds: 2));
      return ChordsResponse(
        chords: _getMockChords(request.key, request.genre),
        progression: _getMockProgression(request.key),
        key: request.key,
        pdfUrl: null, // Would be generated by backend
      );
    }
  }

  List<String> _getMockChords(String key, String genre) {
    final Map<String, List<String>> keyChords = {
      'C': ['C', 'Dm', 'Em', 'F', 'G', 'Am', 'Bdim'],
      'G': ['G', 'Am', 'Bm', 'C', 'D', 'Em', 'F#dim'],
      'D': ['D', 'Em', 'F#m', 'G', 'A', 'Bm', 'C#dim'],
      'A': ['A', 'Bm', 'C#m', 'D', 'E', 'F#m', 'G#dim'],
      'E': ['E', 'F#m', 'G#m', 'A', 'B', 'C#m', 'D#dim'],
    };

    return keyChords[key] ?? keyChords['C']!;
  }

  String _getMockProgression(String key) {
    final Map<String, String> progressions = {
      'C': 'C - Am - F - G',
      'G': 'G - Em - C - D',
      'D': 'D - Bm - G - A',
      'A': 'A - F#m - D - E',
      'E': 'E - C#m - A - B',
    };

    return progressions[key] ?? 'C - Am - F - G';
  }
}
